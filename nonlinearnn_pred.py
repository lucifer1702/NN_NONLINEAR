# -*- coding: utf-8 -*-
"""nonlinearnn_pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JZKet_zo2JbidIJ2V4J-aRYMbUQsXbF6
"""

!pip install keras
from keras.models import Model

model=Model(inputs=x, outputs=[output1,output2])

"""NON LINEAR NN"""

from keras.layers import*

x=Input(shape=(3,))

hidden1=Dense(128, activation ='relu')(x)
hidden2=Dense(128, activation='relu')(hidden1)
output1=Dense(1,activation='linear')(hidden2)
output2=Dense(1,activation='sigmoid')(hidden2)

model.summary()

from keras.utils import plot_model
plot_model(model,show_shapes=True)

"""WE WILL NOW SEE AN EXAMPLE OF NON LINEAR MODEL IN ACTION """

!pip install -q kaggle 
from google.colab import files
files.upload()
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d jangedoo/utkface-new

import zipfile 
zip =zipfile .ZipFile('/content/utkface-new.zip','r')
zip.extractall('/content')
zip.close()

import os

import pandas as pd

import numpy as np

from keras.preprocessing.image import ImageDataGenerator

folder='/content/utkface_aligned_cropped/UTKFace'
age=[]
gender=[]
img_path=[]
for file in os.listdir(folder):
  age.append(int (file.split('_')[0]))
  gender.append(int (file.split('_')[1]))
  img_path.append(file)

df=pd.DataFrame({'age':age, 'gender':gender,'path':img_path})

df.shape
df.head()

from sklearn.model_selection import train_test_split
x_train,x_test=train_test_split(df,test_size=0.2,random_state=1)

x_train.shape

x_train.head()

from keras.applications.vgg16 import VGG16
from keras.layers import*
from keras.models import Model

##DATA AUGMENTATION

train_data=ImageDataGenerator(rescale=1./255,
                              rotation_range=45,
                              width_shift_range=0.25,
                              height_shift_range=0.25,
                              shear_range=0.2,
                              zoom_range=0.25,
                              horizontal_flip=True
    
)
test_data=ImageDataGenerator(rescale=1./255)

train_gen=train_data.flow_from_dataframe(
    x_train,directory=folder,
    x_col='path',y_col=['age','gender'],
    target_size=(200,200),
    class_mode='multi_output'
)

test_gen=train_data.flow_from_dataframe(
    x_test,directory=folder,
    x_col='path',y_col=['age','gender'],
    target_size=(200,200),
    class_mode='multi_output'
)

vggnet=VGG16(include_top=False,input_shape=(200,200,3))

vggnet.trainable=False
output=vggnet.layers[-1].output
flatten=Flatten()(output)##we are using transfer learning here so we are going to get the input of the previous layer and feed it into the layers we are gonna create

"""WE are now going to split the output coming from the flatten layer into two parts"""

dense1=Dense(256,activation='relu')(flatten)
dense2=Dense(256,activation='relu')(flatten)

dense3=Dense(256,activation='relu')(dense1)
dense4=Dense(256,activation='relu')(dense2)

output1=Dense(1,activation='sigmoid',name='age_output')(dense3)
output2=Dense(1,activation='sigmoid',name='gender_output')(dense4)

model=Model(inputs=vggnet.input, outputs=[output1,output2])

model.summary()

from keras.utils import plot_model
plot_model(model)

model.compile(optimizer='sgd',loss={'age_output':'mse','gender_output':'binary_crossentropy'},metrics={'age_output':'mae','gender_output':'accuracy'})

model.fit(train_gen,validation_data=test_gen,epochs=20,batch_size=32)

##accuracy-76.48%
##accuracy_validation-74.29

"""WE CAN THUS CONCLUDE THAT THE MODEL DOESNOT HAVE ANY CASE OF OVERFITTING AS THE VALIDATION ACCURACY AND THE TRAINING ACUURACY SEEM TO BE CLOSE

WE CAN ALSO USE MANY OTHER OPTIMIZERS INSTEAD OF SGD LIKE ADAM ADAGRAD ETC

FURTHER HYPERPARAMETER TUNING CAN ALSO BE DONE...
"""



